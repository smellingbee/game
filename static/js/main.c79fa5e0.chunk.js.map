{"version":3,"sources":["api/archiveScraper.ts","components/dateHeader/DateHeader.tsx","components/app/App.tsx","scripts/serviceWorker.ts","index.tsx"],"names":["monthNames","getAnswersOfDate","date","a","month","getMonth","day","getDate","year","getFullYear","fetch","mode","then","response","text","html","answerDivs","DOMParser","parseFromString","getElementsByClassName","answers","i","length","answer","item","innerHTML","substring","push","getAllowedLetters","letters","join","letter","includes","getCoreLetter","allowedLetters","letterCounts","map","filter","indexOf","Math","max","_","require","DateHeader","props","prevDate","Date","currentDate","getTime","nextDate","today","now","selectDate","className","id","onChange","event","setCurrentDate","target","value","range","newDate","key","onClick","cookies","Cookies","storedCurrentDate","get","initialCurrentDate","App","useState","setAnswers","setAllowedLetters","coreLetter","setCoreLetter","guessFeedback","setGuessFeedback","found","setFound","missed","setMissed","initializeGame","savedProgress","toDateString","displayFeedback","feedback","delay","nonCoreLetters","useEffect","set","JSON","stringify","slice","shuffle","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","onKeyPress","guess","currentTarget","toLowerCase","which","keyCode","word","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c79fa5e0.chunk.js","sourcesContent":["export const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const getAnswersOfDate = async (date: Date): Promise<string[]> => {\n    const month = monthNames[date.getMonth()];\n    const day = date.getDate();\n    const year = date.getFullYear();\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    return await fetch(`${proxyUrl}https://spellingbeeanswers.com/spelling-bee-${month}-${day}-${year}-answers`,\n        {mode: 'cors'})\n        .then(response => response.text())\n        .then(html => {\n            let answerDivs = new DOMParser().parseFromString(html, \"text/html\").getElementsByClassName('aanswer');\n            const answers: string[] = [];\n            for (let i = 0; i < answerDivs.length; i++) {\n                let answer = answerDivs.item(i)?.innerHTML.substring(6);\n                if (answer != null) {\n                    answers.push(answer);\n                }\n            }\n            return answers;\n        })\n};\n\nexport const getAllowedLetters = (answers: string[]): string[] => {\n    const letters: string[] = [];\n    for (let letter of answers.join('')) {\n        if (!letters.includes(letter))\n            letters.push(letter);\n    }\n    return letters;\n};\n\nexport const getCoreLetter = (allowedLetters: string[], answers: string[]): string => {\n    let letterCounts = allowedLetters.map(letter => answers.filter(answer => answer.includes(letter)).length);\n    return allowedLetters[letterCounts.indexOf(Math.max(...letterCounts))];\n};\n\n","import React, {FC} from \"react\";\nimport {monthNames} from \"../../api/archiveScraper\";\nconst _ = require('lodash');\n\nexport const dayMillis = 24 * 60 * 60 * 1000;\n\nexport interface DateHeaderProps {\n    currentDate: Date;\n    setCurrentDate: (arg0: Date) => void;\n}\n\nexport const DateHeader: FC<DateHeaderProps> = (props) => {\n    const prevDate = new Date(props.currentDate.getTime() - dayMillis);\n    const nextDate = new Date(props.currentDate.getTime() + dayMillis);\n    const today = new Date(Date.now());\n\n    const handleDateSelect = (event: any) => {\n        props.setCurrentDate(new Date(event.target.value));\n    };\n\n    const selectDate =\n        <div className=\"current-date\">\n            <select id=\"date-selector\" onChange={handleDateSelect} value={`${monthNames[props.currentDate.getMonth()]} ${props.currentDate.getDate()}, ${props.currentDate.getFullYear()}`}>\n                {_.range(438).map((day: number) => {\n                    const newDate = new Date(today.getTime() - (dayMillis * day));\n                    return (\n                        <option\n                            key={day}\n                            value={`${monthNames[newDate.getMonth()]} ${newDate.getDate()}, ${newDate.getFullYear()}`}>\n                            {`${monthNames[newDate.getMonth()]} ${newDate.getDate()}, ${newDate.getFullYear()}`}\n                        </option>\n                    )\n                })}\n            </select>\n        </div>;\n\n    return (\n        <>\n            <div className=\"dates-container-large\">\n                <div className=\"previous-date\" onClick={() => props.setCurrentDate(prevDate)}>\n                    {`< ${monthNames[prevDate.getMonth()]} ${prevDate.getDate()}, ${prevDate.getFullYear()}`}\n                </div>\n                {selectDate}\n                <div className=\"next-date\"\n                     onClick={() => props.setCurrentDate(nextDate)}>{`${monthNames[nextDate.getMonth()]} ${nextDate.getDate()}, ${nextDate.getFullYear()} >`}\n                </div>\n            </div>\n\n            <div className=\"dates-container-small\">\n                <div className=\"previous-date\" onClick={() => props.setCurrentDate(prevDate)}>\n                    {`<  ${monthNames[prevDate.getMonth()]} ${prevDate.getDate()}`}\n                </div>\n                {selectDate}\n                <div className=\"next-date\"\n                     onClick={() => props.setCurrentDate(nextDate)}>{`${monthNames[nextDate.getMonth()]} ${nextDate.getDate()}  >`}\n                </div>\n            </div>\n        </>\n    );\n};","import React, {useEffect, useState} from 'react';\nimport './styles/App.css';\nimport {getAllowedLetters, getAnswersOfDate, getCoreLetter} from \"../../api/archiveScraper\";\nimport {DateHeader} from \"../dateHeader/DateHeader\";\nimport Cookies from 'universal-cookie';\n\nconst _ = require('lodash');\nconst cookies = new Cookies();\nconst storedCurrentDate = cookies.get('current_date');\nlet initialCurrentDate = new Date();\nif (storedCurrentDate) {\n    initialCurrentDate = new Date(storedCurrentDate);\n}\n\nconst App = () => {\n        const [answers, setAnswers] = useState<string[]>([]);\n        const [allowedLetters, setAllowedLetters] = useState<string[]>(['loading...']);\n        const [coreLetter, setCoreLetter] = useState<string>('');\n        const [guessFeedback, setGuessFeedback] = useState<string>('');\n        const [currentDate, setCurrentDate] = useState<Date>(initialCurrentDate);\n        const [found, setFound] = useState<string[]>([]);\n        const [missed, setMissed] = useState<string[]>([]);\n\n        const initializeGame = async () => {\n            setFound([]);\n            setMissed([]);\n            setAllowedLetters(['loading...']);\n            setAnswers([]);\n            setCoreLetter('');\n\n            let answers: string[] = await getAnswersOfDate(currentDate);\n            let allowedLetters: string[] = getAllowedLetters(answers);\n            setAnswers(answers);\n            setCoreLetter(getCoreLetter(allowedLetters, answers));\n            if (allowedLetters.length === 0) {\n                allowedLetters = ['Error']\n            }\n            setAllowedLetters(allowedLetters);\n            const savedProgress = cookies.get(currentDate.toDateString());\n            if (savedProgress) {\n                setFound(savedProgress);\n            }\n        };\n\n        const handleRefreshButtonClick = () => {\n            if (allowedLetters[0].length > 1) {\n                initializeGame();\n            } else {\n                setAllowedLetters(_.shuffle(allowedLetters));\n            }\n        };\n\n        const displayFeedback = (feedback: string) => {\n            setGuessFeedback(feedback);\n            _.delay(() => {\n                setGuessFeedback('')\n            }, 500);\n        };\n\n        const handleGuess = (event: React.KeyboardEvent<HTMLInputElement>) => {\n            const guess = event.currentTarget.value.toLowerCase();\n            let keyCode = event.which || event.keyCode;\n            if (keyCode === 13) {\n                event.currentTarget.value = '';\n                if (guess.length <= 3) {\n                    displayFeedback(\"Too short\");\n                } else if (!answers.includes(guess)) {\n                    displayFeedback(\"Nope\");\n                } else if (found.includes(guess)) {\n                    displayFeedback(\"Already found\");\n                } else {\n                    displayFeedback(\"Nice!\");\n                    found.push(guess);\n                    setFound(found);\n                    cookies.set(currentDate.toDateString(), JSON.stringify(found));\n                }\n            }\n        };\n\n        const toggleAnswers = () => {\n            if (missed.length) {\n                setMissed([]);\n            } else {\n                setMissed(answers.filter(answer => !found.includes(answer)));\n            }\n        };\n\n        const nonCoreLetters = allowedLetters.filter(letter => letter !== coreLetter);\n\n        useEffect(() => {\n            initializeGame();\n            cookies.set('current_date', JSON.stringify(currentDate));\n        }, [currentDate]);\n\n\n        return (\n            <div className=\"App\">\n                <DateHeader currentDate={currentDate} setCurrentDate={setCurrentDate}/>\n                <div className=\"game-content-container\">\n                    <div className=\"letters\">\n                        {nonCoreLetters.slice(0, 3)}\n                        <span className=\"core-letter\">{coreLetter}</span>\n                        {nonCoreLetters.slice(3)}\n                        <svg className=\"refresh-icon\" onClick={handleRefreshButtonClick} aria-hidden=\"true\"\n                             focusable=\"false\"\n                             data-prefix=\"fas\" data-icon=\"sync\"\n                             role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n                             viewBox=\"0 0 512 512\">\n                            <path fill=\"currentColor\"\n                                  d=\"M440.65 12.57l4 82.77A247.16 247.16 0 0 0 255.83 8C134.73 8 33.91 94.92 12.29 209.82A12 12 0 0 0 24.09 224h49.05a12 12 0 0 0 11.67-9.26 175.91 175.91 0 0 1 317-56.94l-101.46-4.86a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12H500a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12h-47.37a12 12 0 0 0-11.98 12.57zM255.83 432a175.61 175.61 0 0 1-146-77.8l101.8 4.87a12 12 0 0 0 12.57-12v-47.4a12 12 0 0 0-12-12H12a12 12 0 0 0-12 12V500a12 12 0 0 0 12 12h47.35a12 12 0 0 0 12-12.6l-4.15-82.57A247.17 247.17 0 0 0 255.83 504c121.11 0 221.93-86.92 243.55-201.82a12 12 0 0 0-11.8-14.18h-49.05a12 12 0 0 0-11.67 9.26A175.86 175.86 0 0 1 255.83 432z\"/>\n                        </svg>\n                    </div>\n                    <input className=\"guess-input\" onKeyPress={handleGuess}/>\n                    <div className=\"bottom-panel\">\n                        <div className=\"found\">\n                            {found.map((word, index) =>\n                                <div className=\"found-item\" key={index}>{`${index + 1}. ${word}`}</div>\n                            )}\n\n                            {missed.map((word, index) =>\n                                <div className=\"missed-item\" key={index}>{`${index + found.length + 1}. ${word}`}</div>\n                            )}\n                        </div>\n                        <div className=\"bottom-right-panel\">\n                            <div className=\"done-container\" onClick={toggleAnswers}>\n                                {missed.length ? 'Hide Answers' : 'Show Answers'}\n                            </div>\n                            <div className=\"num-remaining-container\">{`${found.length}/${answers.length} found`}</div>\n                        </div>\n                    </div>\n\n                </div>\n                <div className=\"guess-feedback__outer-container\">\n                    <div\n                        className={`guess_feedback ${guessFeedback.length ? 'guess_feedback__active' : ''} ${guessFeedback === 'Nice!' ? 'guess_feedback__correct' : ''}`}>\n                        {guessFeedback}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './scripts/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}